## -*- python -*-

import asyncio
sys.path.append('/usr/local/lib/python3.7/dist-packages/')
import websockets
sys.path.remove('/usr/local/lib/python3.7/dist-packages/')
import signal


future = asyncio.Future()
#def consumer(message):
#    print(message)
#    future.set_result(message)

name = False
async def ws_trigger(websocket, path):
    #async for message in websocket:

    name = await websocket.recv()
    print(f"< {name}")
    future.set_result(name)
    
    #greeting = f"Hello {name}!"
    #await websocket.send(greeting)
    #print(f"> {greeting}")

async def ws_server(stop):
    async with websockets.serve(ws_trigger, "localhost", 8765):
        await stop   


outer = asyncio.get_event_loop()
# The stop condition is set when receiving SIGTERM.
stop = outer.create_future()
outer.add_signal_handler(signal.SIGTERM, stop.set_result, None)

# Run the server until the stop condition is met.
outer.run_until_complete(ws_server(stop))


        
def doit():
    start_server = websockets.serve(ws_trigger, "localhost", 8765)
    outer.run_until_complete(start_server)                                                                                        
    outer.run_forever() 
    


def sdc_plan():
    yield from bps.wait_for([future])
    print('do the big thing!')
